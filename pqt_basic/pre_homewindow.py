
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog,QApplication,QFileDialog

class Ui_home_window(object):

    def setupUi(self, home_window):
        home_window.setObjectName("home_window")
        home_window.resize(1060, 859)
        home_window.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"background-color: rgb(170, 170, 255);")
        self.centralwidget = QtWidgets.QWidget(home_window)
        self.centralwidget.setObjectName("centralwidget")
        self.vline1 = QtWidgets.QFrame(self.centralwidget)
        self.vline1.setGeometry(QtCore.QRect(200, 0, 20, 585))
        self.vline1.setCursor(QtGui.QCursor(QtCore.Qt.SplitHCursor))
        self.vline1.setMouseTracking(False)
        self.vline1.setStyleSheet("")
        self.vline1.setLineWidth(4)
        self.vline1.setFrameShape(QtWidgets.QFrame.VLine)
        self.vline1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.vline1.setObjectName("vline1")
        self.hline1 = QtWidgets.QFrame(self.centralwidget)
        self.hline1.setGeometry(QtCore.QRect(0, 570, 1080, 20))
        self.hline1.setCursor(QtGui.QCursor(QtCore.Qt.SplitVCursor))
        self.hline1.setMouseTracking(False)
        self.hline1.setLineWidth(4)
        self.hline1.setFrameShape(QtWidgets.QFrame.HLine)
        self.hline1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.hline1.setObjectName("hline1")
        self.big_window_frame = QtWidgets.QFrame(self.centralwidget)
        self.big_window_frame.setGeometry(QtCore.QRect(210, 0, 851, 575))
        self.big_window_frame.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 170, 255);")
        self.big_window_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.big_window_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.big_window_frame.setObjectName("big_window_frame")
        self.left_window_fame = QtWidgets.QFrame(self.centralwidget)
        self.left_window_fame.setGeometry(QtCore.QRect(0, 0, 205, 575))
        self.left_window_fame.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.left_window_fame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_window_fame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_window_fame.setObjectName("left_window_fame")
        self.bottom_window_frame = QtWidgets.QFrame(self.centralwidget)
        self.bottom_window_frame.setGeometry(QtCore.QRect(0, 580, 1060, 211))
        self.bottom_window_frame.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.bottom_window_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.bottom_window_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.bottom_window_frame.setObjectName("bottom_window_frame")
        home_window.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(home_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1060, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuTheme = QtWidgets.QMenu(self.menuView)
        self.menuTheme.setObjectName("menuTheme")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        home_window.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(home_window)
        self.statusbar.setObjectName("statusbar")
        home_window.setStatusBar(self.statusbar)
        self.newLB = QtWidgets.QAction(home_window)
        self.newLB.setEnabled(True)
        font = QtGui.QFont()
        self.newLB.setFont(font)
        self.newLB.setObjectName("newLB")
        self.openLB = QtWidgets.QAction(home_window)
        self.openLB.setObjectName("openLB")
        self.saveLB = QtWidgets.QAction(home_window)
        self.saveLB.setObjectName("saveLB")
        self.save_asLB = QtWidgets.QAction(home_window)
        self.save_asLB.setObjectName("save_asLB")
        self.copyLB = QtWidgets.QAction(home_window)
        self.copyLB.setObjectName("copyLB")
        self.actionPaste = QtWidgets.QAction(home_window)
        self.actionPaste.setObjectName("actionPaste")
        self.darkLB = QtWidgets.QAction(home_window)
        self.darkLB.setCheckable(True)
        self.darkLB.setObjectName("darkLB")
        self.lightLB = QtWidgets.QAction(home_window)
        self.lightLB.setCheckable(True)
        self.lightLB.setObjectName("lightLB")
        self.defaultLB = QtWidgets.QAction(home_window)
        self.defaultLB.setCheckable(True)
        self.defaultLB.setObjectName("defaultLB")
        self.tool1LB = QtWidgets.QAction(home_window)
        self.tool1LB.setObjectName("tool1LB")
        self.tool2LB = QtWidgets.QAction(home_window)
        self.tool2LB.setObjectName("tool2LB")
        self.tool3LB = QtWidgets.QAction(home_window)
        self.tool3LB.setObjectName("tool3LB")
        self.new_windowLB = QtWidgets.QAction(home_window)
        self.new_windowLB.setObjectName("new_windowLB")
        self.menuFile.addAction(self.newLB)
        self.menuFile.addAction(self.openLB)
        self.menuFile.addAction(self.saveLB)
        self.menuFile.addAction(self.save_asLB)
        self.menuFile.addAction(self.new_windowLB)
        self.menuEdit.addAction(self.copyLB)
        self.menuEdit.addAction(self.actionPaste)
        self.menuTheme.addAction(self.darkLB)
        self.menuTheme.addAction(self.lightLB)
        self.menuTheme.addAction(self.defaultLB)
        self.menuView.addAction(self.menuTheme.menuAction())
        self.menuTools.addAction(self.tool1LB)
        self.menuTools.addAction(self.tool2LB)
        self.menuTools.addAction(self.tool3LB)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.newLB.triggered.connect(self.msg)
        #self.openLB.triggered.connect(lambda: self.msg("Open"))
        #self.saveLB.triggered.connect(lambda: self.msg("Save"))
        #self.save_asLB.triggered.connect(lambda: self.msg("Save as"))
        #self.copyLB.triggered.connect(lambda: self.msg("Copy"))
        #self.actionPaste.triggered.connect(lambda: self.msg("Paste"))

        self.retranslateUi(home_window)
        QtCore.QMetaObject.connectSlotsByName(home_window)

    def msg(self):
        file_name=QFileDialog.getOpenFileName()

    def retranslateUi(self, home_window):
        _translate = QtCore.QCoreApplication.translate
        home_window.setWindowTitle(_translate("home_window", "Demowindow"))
        self.menuFile.setTitle(_translate("home_window", "File"))
        self.menuEdit.setTitle(_translate("home_window", "Edit"))
        self.menuView.setTitle(_translate("home_window", "View"))
        self.menuTheme.setTitle(_translate("home_window", "Theme"))
        self.menuTools.setTitle(_translate("home_window", "Tools"))
        self.menuHelp.setTitle(_translate("home_window", "Help"))
        self.newLB.setText(_translate("home_window", "New"))
        self.newLB.setToolTip(_translate("home_window", "New"))
        self.newLB.setWhatsThis(_translate("home_window", "Cteart a file"))
        self.newLB.setShortcut(_translate("home_window", "Ctrl+N"))
        self.openLB.setText(_translate("home_window", "Open"))
        self.openLB.setWhatsThis(_translate("home_window", "Open a file"))
        self.openLB.setShortcut(_translate("home_window", "Ctrl+O"))
        self.saveLB.setText(_translate("home_window", "Save"))
        self.saveLB.setShortcut(_translate("home_window", "Ctrl+S"))
        self.save_asLB.setText(_translate("home_window", "Save as"))
        self.save_asLB.setShortcut(_translate("home_window", "Ctrl+Shift+S"))
        self.copyLB.setText(_translate("home_window", "Copy"))
        self.copyLB.setShortcut(_translate("home_window", "Ctrl+C"))
        self.actionPaste.setText(_translate("home_window", "Paste"))
        self.actionPaste.setShortcut(_translate("home_window", "Ctrl+V"))
        self.darkLB.setText(_translate("home_window", "Dark"))
        self.lightLB.setText(_translate("home_window", "Light"))
        self.defaultLB.setText(_translate("home_window", "Default"))
        self.tool1LB.setText(_translate("home_window", "Tool 1"))
        self.tool2LB.setText(_translate("home_window", "Tool 2"))
        self.tool3LB.setText(_translate("home_window", "Tool 3"))
        self.new_windowLB.setText(_translate("home_window", "New window"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    home_window = QtWidgets.QMainWindow()
    ui = Ui_home_window()
    ui.setupUi(home_window)
    home_window.show()
    sys.exit(app.exec_())
